#!/usr/bin/env bash

# Usage:
# Run the service in the local environment:  ./scripts/run
# Run the service inside a Docker container: ./scripts/run -s
# Run the service inside a Docker container: ./scripts/run --in-sandbox

# Debug|Release
CONFIGURATION=Release

set -e
APP_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && cd .. && pwd )/"
source "$APP_HOME/scripts/.functions.sh"

# Folder where PCS sandboxes cache data. Reuse the same folder to speed up the
# sandbox and to save disk space.
# Use PCS_CACHE="$APP_HOME/.cache" to cache inside the project folder
PCS_CACHE="/tmp/azure/iotpcs/.cache"

run() {
    check_dependency_dotnet
    ./scripts/env-vars-check

    cd $APP_HOME
    dotnet restore --verbosity=quiet

    echo "Starting Auth..."
    dotnet run --configuration $CONFIGURATION --project WebService/*.csproj
}

setup_sandbox_cache() {
    mkdir -p $PCS_CACHE/sandbox/.config
    mkdir -p $PCS_CACHE/sandbox/.dotnet
    mkdir -p $PCS_CACHE/sandbox/.nuget
    echo "Note: caching build files in $PCS_CACHE"
}

run_in_sandbox() {

    setup_sandbox_cache

    cd $APP_HOME

    # In Windows this script should use docker.exe, in which case
    # the parameters syntax is different, e.g. volumes path
    # (i.e. C:\path\path\... vs /c/path/path/...).
    set +e
    IS_WINDOWS=$(which cmd.exe)
    set -e
    if [[ -z "$IS_WINDOWS" ]]; then
        check_dependency_docker

        ./scripts/env-vars-check

        # Some settings are used to connect to an external dependency,
        # e.g. Azure Active Directory.
        # Depending on which settings and which dependencies are needed,
        # edit the list of variables.
        docker run -it \
            -p 9001:9001 \
            -e PCS_AUTH_ISSUER \
            -e PCS_AUTH_AUDIENCE \
            -e PCS_AAD_ENDPOINT_URL \
            -e PCS_AAD_TENANT \
            -e PCS_AAD_APPSECRET \
            -e PCS_ARM_ENDPOINT_URL \
            -v "$PCS_CACHE/sandbox/.config:/root/.config" \
            -v "$PCS_CACHE/sandbox/.dotnet:/root/.dotnet" \
            -v "$PCS_CACHE/sandbox/.nuget:/root/.nuget" \
            -v "$APP_HOME:/opt/code" \
            azureiotpcs/code-builder-dotnet:1.0-dotnetcore /opt/code/scripts/run
    else
        # Note 'winpty' is required to provide a TTY to Docker
        echo "Launching cmd.exe /c winpty ..."
        cmd.exe /c "winpty .\scripts\run.cmd --in-sandbox"
    fi
}

if [[ "$1" == "--in-sandbox" || "$1" == "-s" ]]; then
    run_in_sandbox
else
    run
fi

set +e
