-- Copyright (c) Microsoft. All rights reserved.
-- Join IoTHub stream data with device groups and rules as reference data, cross
-- apply rule conditions to get measurement names and values for each device
WITH TelemetryAndRules AS
(
    SELECT
        T.IotHub.ConnectionDeviceId as __deviceid,
        T.PartitionId,
        T.EventEnqueuedUtcTime as __receivedtime,
        R.Id as __ruleid,
        R.AggregationWindow,
        Fields.ArrayValue as MeasurementName,
        GetRecordPropertyValue(T, Fields.ArrayValue) as MeasurementValue
    FROM
        DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime
        JOIN DeviceGroups G ON T.IoTHub.ConnectionDeviceId = G.DeviceId
        JOIN Rules R ON R.GroupId = G.GroupId
        CROSS APPLY GetArrayElements(R.Fields) AS Fields
),
-- Aggregate union results for time windows over 1, 5 and 10 minutes
AggregateMultipleWindows AS (
    SELECT
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.MeasurementName,
        AVG(TR.MeasurementValue),
        MAX(TR.MeasurementValue),
        MIN(TR.MeasurementValue),
        COUNT(TR.MeasurementValue),
        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime
    FROM
        TelemetryAndRules TR PARTITION BY PartitionId
    WHERE
        TR.AggregationWindow = 'tumblingwindow1minutes'
    GROUP BY
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.MeasurementName,
        TumblingWindow(minute, 1)

    UNION

    SELECT
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.MeasurementName,
        AVG(TR.MeasurementValue),
        MAX(TR.MeasurementValue),
        MIN(TR.MeasurementValue),
        COUNT(TR.MeasurementValue),
        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime
    FROM
        TelemetryAndRules TR PARTITION BY PartitionId
    WHERE
        TR.AggregationWindow = 'tumblingwindow5minutes'
    GROUP BY
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.MeasurementName,
        TumblingWindow(minute, 5)

    UNION

    SELECT
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.MeasurementName,
        AVG(TR.MeasurementValue),
        MAX(TR.MeasurementValue),
        MIN(TR.MeasurementValue),
        COUNT(TR.MeasurementValue),
        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime
    FROM
        TelemetryAndRules TR PARTITION BY PartitionId
    WHERE
        TR.AggregationWindow = 'tumblingwindow10minutes'
    GROUP BY
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.MeasurementName,
        TumblingWindow(minute, 10)
),
-- Group aggregated measurements
GroupAggregatedMeasurements AS (
    SELECT
        AM.__deviceid,
        AM.__ruleid,
        AM.PartitionId,
        AM.__lastReceivedTime,
        Collect() AS Measurements
    FROM
        AggregateMultipleWindows AM PARTITION BY PartitionId
    GROUP BY
        AM.__deviceid,
        AM.__ruleid,
        AM.PartitionId,
        AM.__lastReceivedTime,
        System.Timestamp
),
-- Flat aggregated measurements
FlatAggregatedMeasurements AS (
    SELECT
        GA.__deviceid,
        GA.__ruleid,
        GA.__lastReceivedTime,
        udf.flattenMeasurements(GA) AS __aggregates
    FROM
        GroupAggregatedMeasurements GA PARTITION BY PartitionId
),
-- Combine aggregated measurements with rule filters
CombineAggregatedMeasurementsAndRules AS (
    SELECT
        FA.__deviceid,
        FA.__ruleid,
        FA.__aggregates,
        FA.__lastReceivedTime,
        R.Description as __description,
        R.Severity as __severity,
        R.Actions as __actions,
        R.__rulefilterjs as __rulefilterjs
    FROM
        FlatAggregatedMeasurements FA PARTITION BY PartitionId
        JOIN Rules R ON FA.__ruleid = R.Id
),
-- Apply rule filters on aggregated measurements
ApplyAggregatedRuleFilters AS
(
    SELECT
        CMR.*
    FROM
        CombineAggregatedMeasurementsAndRules CMR PARTITION BY PartitionId
    WHERE TRY_CAST(udf.applyRuleFilter(CMR) AS bigint) = 1
),
-- Group instant measurements
GroupInstantMeasurements AS (
    SELECT
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.__receivedTime,
        Collect() AS Measurements
    FROM
        TelemetryAndRules TR PARTITION BY PartitionId
    WHERE
        TR.AggregationWindow = 'instant'
    GROUP BY
        TR.__deviceid,
        TR.__ruleid,
        TR.PartitionId,
        TR.__receivedTime,
        System.Timestamp
),
-- Flat instant measurements
FlatInstantMeasurements AS (
    SELECT
        GI.__deviceid,
        GI.__ruleid,
        GI.__receivedTime,
        udf.flattenMeasurements(GI) AS __aggregates
    FROM
        GroupInstantMeasurements GI PARTITION BY PartitionId
),
-- Combine instant measurements with rule filters
CombineInstantMeasurementsAndRules as
(
    SELECT
        FI.__deviceid,
        FI.__ruleid,
        FI.__receivedtime,
        FI.__aggregates,
        R.Description as __description,
        R.Severity as __severity,
        R.Actions as __actions,
        R.__rulefilterjs as __rulefilterjs
    FROM
        FlatInstantMeasurements FI PARTITION BY PartitionId
        JOIN Rules R ON FI.__ruleid = R.Id
),
-- Apply rule filters on instant measurements
ApplyInstantRuleFilters as
(
    SELECT
        CI.*
    FROM
        CombineInstantMeasurementsAndRules CI PARTITION BY PartitionId
    WHERE TRY_CAST(udf.applyRuleFilter(CI) AS bigint) = 1
),
-- Combine all aggregated and instant alarms
CombineAlarms as
(
    SELECT
        1 as [doc.schemaVersion],
        'alarm' as [doc.schema],
        'open' as [status],
        '1Rule-1Device-NMessage' as [logic],
        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,
        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,
        AA.__description as [rule.description],
        AA.__severity as [rule.severity],
        AA.__actions as [rule.actions],
        AA.__ruleid as [rule.id],
        AA.__deviceId as [device.id],
        AA.__aggregates,
        AA.__lastReceivedTime as [device.msg.received]
    FROM
        ApplyAggregatedRuleFilters AA PARTITION BY PartitionId

    UNION

    SELECT
        1 as [doc.schemaVersion],
        'alarm' as [doc.schema],
        'open' as [status],
        '1Rule-1Device-1Message' as [logic],
        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,
        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,
        AI.__description as [rule.description],
        AI.__severity as [rule.severity],
        AI.__actions as [rule.actions],
        AI.__ruleid as [rule.id],
        AI.__deviceId as [device.id],
        AI.__aggregates,
        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', AI.__receivedTime) as [device.msg.received]
    FROM
        ApplyInstantRuleFilters AI PARTITION BY PartitionId
)

-- Output alarm events
SELECT
    CA.[doc.schemaVersion],
    CA.[doc.schema],
    CA.[status],
    CA.[logic],
    CA.[created],
    CA.[modified],
    CA.[rule.description],
    CA.[rule.severity],
    CA.[rule.id],
    CA.[device.id],
    CA.[device.msg.received]
INTO
    Alarms
FROM
    CombineAlarms CA PARTITION BY PartitionId

-- Output action events
SELECT
    CA.[created],
    CA.[modified],
    CA.[rule.description],
    CA.[rule.severity],
    CA.[rule.id],
    CA.[rule.actions],
    CA.[device.id],
    CA.[device.msg.received]
INTO
    Actions
FROM
    CombineAlarms CA PARTITION BY __partitionid
WHERE
    CA.[rule.actions] IS NOT NULL
