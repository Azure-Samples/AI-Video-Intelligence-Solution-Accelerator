// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/master_service.proto
// Original file comments:
// Copyright 2016 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ==============================================================================
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Tensorflow.Grpc {
  public static partial class MasterService
  {
    static readonly string __ServiceName = "tensorflow.grpc.MasterService";

    static readonly grpc::Marshaller<global::Tensorflow.CreateSessionRequest> __Marshaller_CreateSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.CreateSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.CreateSessionResponse> __Marshaller_CreateSessionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.CreateSessionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.ExtendSessionRequest> __Marshaller_ExtendSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.ExtendSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.ExtendSessionResponse> __Marshaller_ExtendSessionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.ExtendSessionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.PartialRunSetupRequest> __Marshaller_PartialRunSetupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.PartialRunSetupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.PartialRunSetupResponse> __Marshaller_PartialRunSetupResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.PartialRunSetupResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.RunStepRequest> __Marshaller_RunStepRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.RunStepRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.RunStepResponse> __Marshaller_RunStepResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.RunStepResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.CloseSessionRequest> __Marshaller_CloseSessionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.CloseSessionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.CloseSessionResponse> __Marshaller_CloseSessionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.CloseSessionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.ListDevicesRequest> __Marshaller_ListDevicesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.ListDevicesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.ListDevicesResponse> __Marshaller_ListDevicesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.ListDevicesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.ResetRequest> __Marshaller_ResetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.ResetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tensorflow.ResetResponse> __Marshaller_ResetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tensorflow.ResetResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Tensorflow.CreateSessionRequest, global::Tensorflow.CreateSessionResponse> __Method_CreateSession = new grpc::Method<global::Tensorflow.CreateSessionRequest, global::Tensorflow.CreateSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSession",
        __Marshaller_CreateSessionRequest,
        __Marshaller_CreateSessionResponse);

    static readonly grpc::Method<global::Tensorflow.ExtendSessionRequest, global::Tensorflow.ExtendSessionResponse> __Method_ExtendSession = new grpc::Method<global::Tensorflow.ExtendSessionRequest, global::Tensorflow.ExtendSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExtendSession",
        __Marshaller_ExtendSessionRequest,
        __Marshaller_ExtendSessionResponse);

    static readonly grpc::Method<global::Tensorflow.PartialRunSetupRequest, global::Tensorflow.PartialRunSetupResponse> __Method_PartialRunSetup = new grpc::Method<global::Tensorflow.PartialRunSetupRequest, global::Tensorflow.PartialRunSetupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PartialRunSetup",
        __Marshaller_PartialRunSetupRequest,
        __Marshaller_PartialRunSetupResponse);

    static readonly grpc::Method<global::Tensorflow.RunStepRequest, global::Tensorflow.RunStepResponse> __Method_RunStep = new grpc::Method<global::Tensorflow.RunStepRequest, global::Tensorflow.RunStepResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RunStep",
        __Marshaller_RunStepRequest,
        __Marshaller_RunStepResponse);

    static readonly grpc::Method<global::Tensorflow.CloseSessionRequest, global::Tensorflow.CloseSessionResponse> __Method_CloseSession = new grpc::Method<global::Tensorflow.CloseSessionRequest, global::Tensorflow.CloseSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CloseSession",
        __Marshaller_CloseSessionRequest,
        __Marshaller_CloseSessionResponse);

    static readonly grpc::Method<global::Tensorflow.ListDevicesRequest, global::Tensorflow.ListDevicesResponse> __Method_ListDevices = new grpc::Method<global::Tensorflow.ListDevicesRequest, global::Tensorflow.ListDevicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDevices",
        __Marshaller_ListDevicesRequest,
        __Marshaller_ListDevicesResponse);

    static readonly grpc::Method<global::Tensorflow.ResetRequest, global::Tensorflow.ResetResponse> __Method_Reset = new grpc::Method<global::Tensorflow.ResetRequest, global::Tensorflow.ResetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Reset",
        __Marshaller_ResetRequest,
        __Marshaller_ResetResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Tensorflow.Grpc.MasterServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MasterService</summary>
    public abstract partial class MasterServiceBase
    {
      /// <summary>
      /// Creates a session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tensorflow.CreateSessionResponse> CreateSession(global::Tensorflow.CreateSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Extends a session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tensorflow.ExtendSessionResponse> ExtendSession(global::Tensorflow.ExtendSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Prepares future partial run calls.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tensorflow.PartialRunSetupResponse> PartialRunSetup(global::Tensorflow.PartialRunSetupRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Drives the graph computation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tensorflow.RunStepResponse> RunStep(global::Tensorflow.RunStepRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Closes a session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tensorflow.CloseSessionResponse> CloseSession(global::Tensorflow.CloseSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List the devices usable by the master.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tensorflow.ListDevicesResponse> ListDevices(global::Tensorflow.ListDevicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Close and abandon all existing sessions.  Ongoing computations
      /// will no longer affect fresh ones via the resources in containers listed in
      /// the ResetRequest.  See ResetRequest for more details.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Tensorflow.ResetResponse> Reset(global::Tensorflow.ResetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MasterService</summary>
    public partial class MasterServiceClient : grpc::ClientBase<MasterServiceClient>
    {
      /// <summary>Creates a new client for MasterService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MasterServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MasterService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MasterServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MasterServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MasterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.CreateSessionResponse CreateSession(global::Tensorflow.CreateSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.CreateSessionResponse CreateSession(global::Tensorflow.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Creates a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.CreateSessionResponse> CreateSessionAsync(global::Tensorflow.CreateSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.CreateSessionResponse> CreateSessionAsync(global::Tensorflow.CreateSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSession, null, options, request);
      }
      /// <summary>
      /// Extends a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.ExtendSessionResponse ExtendSession(global::Tensorflow.ExtendSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExtendSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Extends a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.ExtendSessionResponse ExtendSession(global::Tensorflow.ExtendSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExtendSession, null, options, request);
      }
      /// <summary>
      /// Extends a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.ExtendSessionResponse> ExtendSessionAsync(global::Tensorflow.ExtendSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExtendSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Extends a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.ExtendSessionResponse> ExtendSessionAsync(global::Tensorflow.ExtendSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExtendSession, null, options, request);
      }
      /// <summary>
      /// Prepares future partial run calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.PartialRunSetupResponse PartialRunSetup(global::Tensorflow.PartialRunSetupRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PartialRunSetup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Prepares future partial run calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.PartialRunSetupResponse PartialRunSetup(global::Tensorflow.PartialRunSetupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PartialRunSetup, null, options, request);
      }
      /// <summary>
      /// Prepares future partial run calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.PartialRunSetupResponse> PartialRunSetupAsync(global::Tensorflow.PartialRunSetupRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PartialRunSetupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Prepares future partial run calls.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.PartialRunSetupResponse> PartialRunSetupAsync(global::Tensorflow.PartialRunSetupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PartialRunSetup, null, options, request);
      }
      /// <summary>
      /// Drives the graph computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.RunStepResponse RunStep(global::Tensorflow.RunStepRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RunStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Drives the graph computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.RunStepResponse RunStep(global::Tensorflow.RunStepRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RunStep, null, options, request);
      }
      /// <summary>
      /// Drives the graph computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.RunStepResponse> RunStepAsync(global::Tensorflow.RunStepRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RunStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Drives the graph computation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.RunStepResponse> RunStepAsync(global::Tensorflow.RunStepRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RunStep, null, options, request);
      }
      /// <summary>
      /// Closes a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.CloseSessionResponse CloseSession(global::Tensorflow.CloseSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Closes a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.CloseSessionResponse CloseSession(global::Tensorflow.CloseSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseSession, null, options, request);
      }
      /// <summary>
      /// Closes a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.CloseSessionResponse> CloseSessionAsync(global::Tensorflow.CloseSessionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Closes a session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.CloseSessionResponse> CloseSessionAsync(global::Tensorflow.CloseSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseSession, null, options, request);
      }
      /// <summary>
      /// List the devices usable by the master.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.ListDevicesResponse ListDevices(global::Tensorflow.ListDevicesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListDevices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the devices usable by the master.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.ListDevicesResponse ListDevices(global::Tensorflow.ListDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDevices, null, options, request);
      }
      /// <summary>
      /// List the devices usable by the master.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.ListDevicesResponse> ListDevicesAsync(global::Tensorflow.ListDevicesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListDevicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List the devices usable by the master.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.ListDevicesResponse> ListDevicesAsync(global::Tensorflow.ListDevicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDevices, null, options, request);
      }
      /// <summary>
      /// Close and abandon all existing sessions.  Ongoing computations
      /// will no longer affect fresh ones via the resources in containers listed in
      /// the ResetRequest.  See ResetRequest for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.ResetResponse Reset(global::Tensorflow.ResetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Reset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close and abandon all existing sessions.  Ongoing computations
      /// will no longer affect fresh ones via the resources in containers listed in
      /// the ResetRequest.  See ResetRequest for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Tensorflow.ResetResponse Reset(global::Tensorflow.ResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Reset, null, options, request);
      }
      /// <summary>
      /// Close and abandon all existing sessions.  Ongoing computations
      /// will no longer affect fresh ones via the resources in containers listed in
      /// the ResetRequest.  See ResetRequest for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.ResetResponse> ResetAsync(global::Tensorflow.ResetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Close and abandon all existing sessions.  Ongoing computations
      /// will no longer affect fresh ones via the resources in containers listed in
      /// the ResetRequest.  See ResetRequest for more details.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Tensorflow.ResetResponse> ResetAsync(global::Tensorflow.ResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Reset, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MasterServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MasterServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MasterServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSession, serviceImpl.CreateSession)
          .AddMethod(__Method_ExtendSession, serviceImpl.ExtendSession)
          .AddMethod(__Method_PartialRunSetup, serviceImpl.PartialRunSetup)
          .AddMethod(__Method_RunStep, serviceImpl.RunStep)
          .AddMethod(__Method_CloseSession, serviceImpl.CloseSession)
          .AddMethod(__Method_ListDevices, serviceImpl.ListDevices)
          .AddMethod(__Method_Reset, serviceImpl.Reset).Build();
    }

  }
}
#endregion
